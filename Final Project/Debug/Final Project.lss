
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000080a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  0000080a  0000089e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800260  00800260  00000a9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015cc  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000306  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b35  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035b  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000981  00000000  00000000  000035f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  8a:	0c 94 03 04 	jmp	0x806	; 0x806 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <FlashLCD>:
void ToneBuzzer()
{
	int delay = 0;
	while (1)
	{
		if (delay < 1) delay = BUZZER_DELAY;
  92:	ae 9a       	sbi	0x15, 6	; 21
  94:	81 ee       	ldi	r24, 0xE1	; 225
  96:	94 e0       	ldi	r25, 0x04	; 4
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <FlashLCD+0x6>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <FlashLCD+0xc>
  9e:	00 00       	nop
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	80 78       	andi	r24, 0x80	; 128
  a4:	85 bb       	out	0x15, r24	; 21
  a6:	08 95       	ret

000000a8 <CheckBusy>:
  a8:	11 ba       	out	0x11, r1	; 17
  aa:	a9 9a       	sbi	0x15, 1	; 21
  ac:	a8 98       	cbi	0x15, 0	; 21
  ae:	97 9b       	sbis	0x12, 7	; 18
  b0:	04 c0       	rjmp	.+8      	; 0xba <CheckBusy+0x12>
  b2:	0e 94 49 00 	call	0x92	; 0x92 <FlashLCD>
  b6:	97 99       	sbic	0x12, 7	; 18
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <CheckBusy+0xa>
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	81 bb       	out	0x11, r24	; 17
  be:	08 95       	ret

000000c0 <SendCmd>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	0e 94 54 00 	call	0xa8	; 0xa8 <CheckBusy>
  c8:	c2 bb       	out	0x12, r28	; 18
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8c 7f       	andi	r24, 0xFC	; 252
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0e 94 49 00 	call	0x92	; 0x92 <FlashLCD>
  d4:	12 ba       	out	0x12, r1	; 18
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <SendChar>:
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <CheckBusy>
  e2:	c2 bb       	out	0x12, r28	; 18
  e4:	a9 98       	cbi	0x15, 1	; 21
  e6:	a8 9a       	sbi	0x15, 0	; 21
  e8:	0e 94 49 00 	call	0x92	; 0x92 <FlashLCD>
  ec:	12 ba       	out	0x12, r1	; 18
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <SendString>:
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
  f8:	88 81       	ld	r24, Y
  fa:	88 23       	and	r24, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <SendString+0x18>
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	0e 94 6d 00 	call	0xda	; 0xda <SendChar>
 104:	89 91       	ld	r24, Y+
 106:	81 11       	cpse	r24, r1
 108:	fb cf       	rjmp	.-10     	; 0x100 <SendString+0xe>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <CursorPos>:
 110:	60 58       	subi	r22, 0x80	; 128
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	86 0f       	add	r24, r22
 11e:	0e 94 60 00 	call	0xc0	; 0xc0 <SendCmd>
 122:	08 95       	ret

00000124 <InitLCD>:
 124:	84 b3       	in	r24, 0x14	; 20
 126:	83 64       	ori	r24, 0x43	; 67
 128:	84 bb       	out	0x14, r24	; 20
 12a:	83 ed       	ldi	r24, 0xD3	; 211
 12c:	90 e3       	ldi	r25, 0x30	; 48
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <InitLCD+0xa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <InitLCD+0x10>
 134:	00 00       	nop
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 60 00 	call	0xc0	; 0xc0 <SendCmd>
 13c:	83 ef       	ldi	r24, 0xF3	; 243
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <InitLCD+0x1c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <InitLCD+0x22>
 146:	00 00       	nop
 148:	88 e3       	ldi	r24, 0x38	; 56
 14a:	0e 94 60 00 	call	0xc0	; 0xc0 <SendCmd>
 14e:	90 e1       	ldi	r25, 0x10	; 16
 150:	9a 95       	dec	r25
 152:	f1 f7       	brne	.-4      	; 0x150 <InitLCD+0x2c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <InitLCD+0x32>
 156:	8e e0       	ldi	r24, 0x0E	; 14
 158:	0e 94 60 00 	call	0xc0	; 0xc0 <SendCmd>
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <InitLCD+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <InitLCD+0x40>
 164:	08 95       	ret

00000166 <ClrScr>:
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <SendCmd>
 16c:	83 ef       	ldi	r24, 0xF3	; 243
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <ClrScr+0xa>
 174:	00 c0       	rjmp	.+0      	; 0x176 <ClrScr+0x10>
 176:	00 00       	nop
 178:	08 95       	ret

0000017a <keypressed>:
int keypressed(void)                      //Function for receiving input form keypad
{
	int row,col,keynum;
	while(1)
	{
		for(col=0;col<4;col++)
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	a0 e0       	ldi	r26, 0x00	; 0
		{
			DDRA=(0b00010000<<col);
 17e:	60 e1       	ldi	r22, 0x10	; 16
 180:	70 e0       	ldi	r23, 0x00	; 0
			PORTA=(~(0b00010000<<col));
			for(row=0;row<4;row++)
			{
				if(!(PINA&(1<<row)))
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	e0 e0       	ldi	r30, 0x00	; 0
int keypressed(void)                      //Function for receiving input form keypad
{
	int row,col,keynum;
	while(1)
	{
		for(col=0;col<4;col++)
 186:	8b 2f       	mov	r24, r27
 188:	9a 2f       	mov	r25, r26
		{
			DDRA=(0b00010000<<col);
 18a:	9b 01       	movw	r18, r22
 18c:	08 2e       	mov	r0, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <keypressed+0x1a>
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <keypressed+0x16>
 198:	2a bb       	out	0x1a, r18	; 26
			PORTA=(~(0b00010000<<col));
 19a:	20 95       	com	r18
 19c:	2b bb       	out	0x1b, r18	; 27
			for(row=0;row<4;row++)
			{
				if(!(PINA&(1<<row)))
 19e:	c8 9b       	sbis	0x19, 0	; 25
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <keypressed+0x42>
 1a2:	4f 2f       	mov	r20, r31
 1a4:	5e 2f       	mov	r21, r30
 1a6:	29 b3       	in	r18, 0x19	; 25
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	04 2e       	mov	r0, r20
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <keypressed+0x38>
 1ae:	35 95       	asr	r19
 1b0:	27 95       	ror	r18
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <keypressed+0x34>
 1b6:	20 fd       	sbrc	r18, 0
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <keypressed+0x58>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <keypressed+0x46>
	{
		for(col=0;col<4;col++)
		{
			DDRA=(0b00010000<<col);
			PORTA=(~(0b00010000<<col));
			for(row=0;row<4;row++)
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
			{
				if(!(PINA&(1<<row)))
				{
					keynum=4*row+col+1;
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	48 0f       	add	r20, r24
 1ca:	59 1f       	adc	r21, r25
 1cc:	ca 01       	movw	r24, r20
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	08 95       	ret
	{
		for(col=0;col<4;col++)
		{
			DDRA=(0b00010000<<col);
			PORTA=(~(0b00010000<<col));
			for(row=0;row<4;row++)
 1d2:	4f 5f       	subi	r20, 0xFF	; 255
 1d4:	5f 4f       	sbci	r21, 0xFF	; 255
 1d6:	44 30       	cpi	r20, 0x04	; 4
 1d8:	51 05       	cpc	r21, r1
 1da:	29 f7       	brne	.-54     	; 0x1a6 <keypressed+0x2c>
int keypressed(void)                      //Function for receiving input form keypad
{
	int row,col,keynum;
	while(1)
	{
		for(col=0;col<4;col++)
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	91 05       	cpc	r25, r1
 1e2:	99 f6       	brne	.-90     	; 0x18a <keypressed+0x10>
 1e4:	d0 cf       	rjmp	.-96     	; 0x186 <keypressed+0xc>

000001e6 <Time_Initial>:
int TimeR=0;           //global variable as factor of time
int i;                 //Questions&Answers Counter
int j;                //7 Segment Counter
void Time_Initial()        //initializing time function
{
	TimeR=0;
 1e6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__data_end+0x1>
 1ea:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__data_end>
	TCCR1B|=(1<<CS12);     //prescalar 256
 1ee:	8e b5       	in	r24, 0x2e	; 46
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	8e bd       	out	0x2e, r24	; 46
	TCNT1=34285;          //real time calculation for 7.5 seconds
 1f4:	8d ee       	ldi	r24, 0xED	; 237
 1f6:	95 e8       	ldi	r25, 0x85	; 133
 1f8:	9d bd       	out	0x2d, r25	; 45
 1fa:	8c bd       	out	0x2c, r24	; 44
	TIMSK|=(1<<TOIE1);   //interrupt flag
 1fc:	89 b7       	in	r24, 0x39	; 57
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	89 bf       	out	0x39, r24	; 57
	sei();              //interrupt function
 202:	78 94       	sei
 204:	08 95       	ret

00000206 <__vector_8>:
}

ISR(TIMER1_OVF_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	TimeR++;
 228:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
 22c:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__data_end+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
 236:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
	if(TimeR==12)   //time reaches 7.5*12= 90 seconds =1.5 minute
 23a:	0c 97       	sbiw	r24, 0x0c	; 12
 23c:	09 f0       	breq	.+2      	; 0x240 <__vector_8+0x3a>
 23e:	57 c0       	rjmp	.+174    	; 0x2ee <__vector_8+0xe8>
	{
        CursorPos(0,0);                     
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
        SendString("TimeOut,Score Is");
 248:	88 e8       	ldi	r24, 0x88	; 136
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
        CursorPos(1,0);                      
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
        SendString("On 7 Segment____");
 258:	89 e9       	ldi	r24, 0x99	; 153
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	2f e3       	ldi	r18, 0x3F	; 63
 262:	82 e4       	ldi	r24, 0x42	; 66
 264:	9f e0       	ldi	r25, 0x0F	; 15
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <__vector_8+0x60>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <__vector_8+0x6a>
 270:	00 00       	nop
		_delay_ms(5000);
		
		if(j-1>=5) 
 272:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <j>
 276:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <j+0x1>
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	05 97       	sbiw	r24, 0x05	; 5
 27e:	9c f0       	brlt	.+38     	; 0x2a6 <__vector_8+0xa0>
		    {
			ClrScr(); 
 280:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
			CursorPos(0,0); SendString("Congratulations");       
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 28c:	8a ea       	ldi	r24, 0xAA	; 170
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
			CursorPos(1,0); SendString("You Succeeded");
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 29c:	8a eb       	ldi	r24, 0xBA	; 186
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 2a4:	12 c0       	rjmp	.+36     	; 0x2ca <__vector_8+0xc4>
			}
       else {
			ClrScr(); 
 2a6:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
			CursorPos(0,0); SendString("Hard lock :' ");
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 2b2:	88 ec       	ldi	r24, 0xC8	; 200
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
			CursorPos(1,0); SendString("You Failed");
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 2c2:	86 ed       	ldi	r24, 0xD6	; 214
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	9d e3       	ldi	r25, 0x3D	; 61
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <__vector_8+0xca>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <__vector_8+0xd4>
 2da:	00 00       	nop
			}
		_delay_ms(20000);
		TCNT1=34285;  //reset timer
 2dc:	8d ee       	ldi	r24, 0xED	; 237
 2de:	95 e8       	ldi	r25, 0x85	; 133
 2e0:	9d bd       	out	0x2d, r25	; 45
 2e2:	8c bd       	out	0x2c, r24	; 44
		TimeR=0;      //reset factor
 2e4:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <__data_end+0x1>
 2e8:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__data_end>
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__vector_8+0xf0>
	}
	else TCNT1=34285;  //restart next 7.5 seconds in timer
 2ee:	8d ee       	ldi	r24, 0xED	; 237
 2f0:	95 e8       	ldi	r25, 0x85	; 133
 2f2:	9d bd       	out	0x2d, r25	; 45
 2f4:	8c bd       	out	0x2c, r24	; 44
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <Rot_0_Deg>:

 void Rot_0_Deg()
 {
 318:	84 e1       	ldi	r24, 0x14	; 20
 31a:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)
	 {
		 PORTB|=(1<<7);
 31c:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	e9 ef       	ldi	r30, 0xF9	; 249
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <Rot_0_Deg+0xa>
 326:	00 c0       	rjmp	.+0      	; 0x328 <Rot_0_Deg+0x10>
 328:	00 00       	nop
		 _delay_us(1000);
		 PORTB&=~(1<<7);
 32a:	c7 98       	cbi	0x18, 7	; 24
 32c:	ed e8       	ldi	r30, 0x8D	; 141
 32e:	f2 e1       	ldi	r31, 0x12	; 18
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <Rot_0_Deg+0x18>
 334:	00 c0       	rjmp	.+0      	; 0x336 <Rot_0_Deg+0x1e>
 336:	00 00       	nop
 338:	01 97       	sbiw	r24, 0x01	; 1
	else TCNT1=34285;  //restart next 7.5 seconds in timer
}

 void Rot_0_Deg()
 {
	 for(int c=0;c<20;c++)
 33a:	81 f7       	brne	.-32     	; 0x31c <Rot_0_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000);
		 PORTB&=~(1<<7);
		 _delay_us(19000);
	 }
 }
 33c:	08 95       	ret

0000033e <Rot_1_Deg>:
 void Rot_1_Deg()
 {
 33e:	84 e1       	ldi	r24, 0x14	; 20
 340:	90 e0       	ldi	r25, 0x00	; 0
	 	 for(int c=0;c<20;c++)
	 {
		 PORTB|=(1<<7);
 342:	c7 9a       	sbi	0x18, 7	; 24
 344:	e5 e1       	ldi	r30, 0x15	; 21
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <Rot_1_Deg+0xa>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <Rot_1_Deg+0x10>
		 _delay_us(1000+111);
		 PORTB&=~(1<<7);
 34e:	c7 98       	cbi	0x18, 7	; 24
 350:	e2 e7       	ldi	r30, 0x72	; 114
 352:	f2 e1       	ldi	r31, 0x12	; 18
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <Rot_1_Deg+0x16>
 358:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_us(19000);
	 }
 }
 void Rot_1_Deg()
 {
	 	 for(int c=0;c<20;c++)
 35a:	99 f7       	brne	.-26     	; 0x342 <Rot_1_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-111);
	 }
 }
 35c:	08 95       	ret

0000035e <Rot_2_Deg>:

 void Rot_2_Deg()
 {
 35e:	84 e1       	ldi	r24, 0x14	; 20
 360:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)
	 {
		 PORTB|=(1<<7);
 362:	c7 9a       	sbi	0x18, 7	; 24
 364:	e1 e3       	ldi	r30, 0x31	; 49
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	31 97       	sbiw	r30, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <Rot_2_Deg+0xa>
 36c:	00 00       	nop
		 _delay_us(1000+2*111);
		 PORTB&=~(1<<7);
 36e:	c7 98       	cbi	0x18, 7	; 24
 370:	e6 e5       	ldi	r30, 0x56	; 86
 372:	f2 e1       	ldi	r31, 0x12	; 18
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <Rot_2_Deg+0x16>
 378:	00 00       	nop
 37a:	01 97       	sbiw	r24, 0x01	; 1
	 }
 }

 void Rot_2_Deg()
 {
	 for(int c=0;c<20;c++)
 37c:	91 f7       	brne	.-28     	; 0x362 <Rot_2_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+2*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-2*111);
	 }
 }
 37e:	08 95       	ret

00000380 <Rot_3_Deg>:
 void Rot_3_Deg()
 {
 380:	84 e1       	ldi	r24, 0x14	; 20
 382:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)

	 {
		 PORTB|=(1<<7);
 384:	c7 9a       	sbi	0x18, 7	; 24
 386:	ed e4       	ldi	r30, 0x4D	; 77
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <Rot_3_Deg+0xa>
		 _delay_us(1000+3*111);
		 PORTB&=~(1<<7);
 38e:	c7 98       	cbi	0x18, 7	; 24
 390:	ea e3       	ldi	r30, 0x3A	; 58
 392:	f2 e1       	ldi	r31, 0x12	; 18
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <Rot_3_Deg+0x14>
 398:	00 c0       	rjmp	.+0      	; 0x39a <Rot_3_Deg+0x1a>
 39a:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_us(19000-2*111);
	 }
 }
 void Rot_3_Deg()
 {
	 for(int c=0;c<20;c++)
 39c:	99 f7       	brne	.-26     	; 0x384 <Rot_3_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+3*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-3*111);
	 }
 }
 39e:	08 95       	ret

000003a0 <Rot_4_Deg>:
 void Rot_4_Deg()
 {
 3a0:	84 e1       	ldi	r24, 0x14	; 20
 3a2:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)

	 {
		 PORTB|=(1<<7);
 3a4:	c7 9a       	sbi	0x18, 7	; 24
 3a6:	e8 e6       	ldi	r30, 0x68	; 104
 3a8:	f1 e0       	ldi	r31, 0x01	; 1
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <Rot_4_Deg+0xa>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <Rot_4_Deg+0x10>
 3b0:	00 00       	nop
		 _delay_us(1000+4*111);
		 PORTB&=~(1<<7);
 3b2:	c7 98       	cbi	0x18, 7	; 24
 3b4:	ee e1       	ldi	r30, 0x1E	; 30
 3b6:	f2 e1       	ldi	r31, 0x12	; 18
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Rot_4_Deg+0x18>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Rot_4_Deg+0x1e>
 3be:	00 00       	nop
 3c0:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_us(19000-3*111);
	 }
 }
 void Rot_4_Deg()
 {
	 for(int c=0;c<20;c++)
 3c2:	81 f7       	brne	.-32     	; 0x3a4 <Rot_4_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+4*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-4*111);
	 }
 }
 3c4:	08 95       	ret

000003c6 <Rot_5_Deg>:
 void Rot_5_Deg()
 {
 3c6:	84 e1       	ldi	r24, 0x14	; 20
 3c8:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)

	 {
		 PORTB|=(1<<7);
 3ca:	c7 9a       	sbi	0x18, 7	; 24
 3cc:	e4 e8       	ldi	r30, 0x84	; 132
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Rot_5_Deg+0xa>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Rot_5_Deg+0x10>
		 _delay_us(1000+5*111);
		 PORTB&=~(1<<7);
 3d6:	c7 98       	cbi	0x18, 7	; 24
 3d8:	e3 e0       	ldi	r30, 0x03	; 3
 3da:	f2 e1       	ldi	r31, 0x12	; 18
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <Rot_5_Deg+0x16>
 3e0:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_us(19000-4*111);
	 }
 }
 void Rot_5_Deg()
 {
	 for(int c=0;c<20;c++)
 3e2:	99 f7       	brne	.-26     	; 0x3ca <Rot_5_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+5*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-5*111);
	 }
 }
 3e4:	08 95       	ret

000003e6 <Rot_6_Deg>:
 void Rot_6_Deg()
 {
 3e6:	84 e1       	ldi	r24, 0x14	; 20
 3e8:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)

	 {
		 PORTB|=(1<<7);
 3ea:	c7 9a       	sbi	0x18, 7	; 24
 3ec:	e0 ea       	ldi	r30, 0xA0	; 160
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <Rot_6_Deg+0xa>
 3f4:	00 00       	nop
		 _delay_us(1000+6*111);
		 PORTB&=~(1<<7);
 3f6:	c7 98       	cbi	0x18, 7	; 24
 3f8:	e7 ee       	ldi	r30, 0xE7	; 231
 3fa:	f1 e1       	ldi	r31, 0x11	; 17
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <Rot_6_Deg+0x16>
 400:	00 00       	nop
 402:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_us(19000-5*111);
	 }
 }
 void Rot_6_Deg()
 {
	 for(int c=0;c<20;c++)
 404:	91 f7       	brne	.-28     	; 0x3ea <Rot_6_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+6*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-6*111);
	 }
 }
 406:	08 95       	ret

00000408 <Rot_7_Deg>:

 void Rot_7_Deg()
 {
 408:	84 e1       	ldi	r24, 0x14	; 20
 40a:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)

	 {
		 PORTB|=(1<<7);
 40c:	c7 9a       	sbi	0x18, 7	; 24
 40e:	ec eb       	ldi	r30, 0xBC	; 188
 410:	f1 e0       	ldi	r31, 0x01	; 1
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <Rot_7_Deg+0xa>
		 _delay_us(1000+7*111);
		 PORTB&=~(1<<7);
 416:	c7 98       	cbi	0x18, 7	; 24
 418:	eb ec       	ldi	r30, 0xCB	; 203
 41a:	f1 e1       	ldi	r31, 0x11	; 17
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <Rot_7_Deg+0x14>
 420:	00 c0       	rjmp	.+0      	; 0x422 <Rot_7_Deg+0x1a>
 422:	01 97       	sbiw	r24, 0x01	; 1
	 }
 }

 void Rot_7_Deg()
 {
	 for(int c=0;c<20;c++)
 424:	99 f7       	brne	.-26     	; 0x40c <Rot_7_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+7*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-7*111);
	 }
 }
 426:	08 95       	ret

00000428 <Rot_8_Deg>:

 void Rot_8_Deg()
 {
 428:	84 e1       	ldi	r24, 0x14	; 20
 42a:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)
	 {
		 PORTB|=(1<<7);
 42c:	c7 9a       	sbi	0x18, 7	; 24
 42e:	e7 ed       	ldi	r30, 0xD7	; 215
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <Rot_8_Deg+0xa>
 436:	00 c0       	rjmp	.+0      	; 0x438 <Rot_8_Deg+0x10>
 438:	00 00       	nop
		 _delay_us(1000+8*111);
		 PORTB&=~(1<<7);
 43a:	c7 98       	cbi	0x18, 7	; 24
 43c:	ef ea       	ldi	r30, 0xAF	; 175
 43e:	f1 e1       	ldi	r31, 0x11	; 17
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <Rot_8_Deg+0x18>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Rot_8_Deg+0x1e>
 446:	00 00       	nop
 448:	01 97       	sbiw	r24, 0x01	; 1
	 }
 }

 void Rot_8_Deg()
 {
	 for(int c=0;c<20;c++)
 44a:	81 f7       	brne	.-32     	; 0x42c <Rot_8_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+8*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-8*111);
	 }
 }
 44c:	08 95       	ret

0000044e <Rot_9_Deg>:

 void Rot_9_Deg()
 {
 44e:	84 e1       	ldi	r24, 0x14	; 20
 450:	90 e0       	ldi	r25, 0x00	; 0
	 for(int c=0;c<20;c++)
	 {
		 PORTB|=(1<<7);
 452:	c7 9a       	sbi	0x18, 7	; 24
 454:	e3 ef       	ldi	r30, 0xF3	; 243
 456:	f1 e0       	ldi	r31, 0x01	; 1
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <Rot_9_Deg+0xa>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <Rot_9_Deg+0x10>
		 _delay_us(1000+9*111);
		 PORTB&=~(1<<7);
 45e:	c7 98       	cbi	0x18, 7	; 24
 460:	e4 e9       	ldi	r30, 0x94	; 148
 462:	f1 e1       	ldi	r31, 0x11	; 17
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__stack+0x5>
 468:	01 97       	sbiw	r24, 0x01	; 1
	 }
 }

 void Rot_9_Deg()
 {
	 for(int c=0;c<20;c++)
 46a:	99 f7       	brne	.-26     	; 0x452 <Rot_9_Deg+0x4>
		 PORTB|=(1<<7);
		 _delay_us(1000+9*111);
		 PORTB&=~(1<<7);
		 _delay_us(19000-9*111);
	 }
 }
 46c:	08 95       	ret

0000046e <main>:

int main(void)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	ca 54       	subi	r28, 0x4A	; 74
 478:	d1 09       	sbc	r29, r1
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61

InitLCD();
 484:	0e 94 92 00 	call	0x124	; 0x124 <InitLCD>
DDRB=0xFF;                           //make B as output (for leds & Buzzer&motor)
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	87 bb       	out	0x17, r24	; 23
char *Question[9];                   //array of pointers which contains 9 questions
Question[0]="Q1_  4x+1=45";
 48c:	81 ee       	ldi	r24, 0xE1	; 225
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	9a 83       	std	Y+2, r25	; 0x02
 492:	89 83       	std	Y+1, r24	; 0x01
Question[1]="Q2_  7x-6=3x+2";
 494:	8e ee       	ldi	r24, 0xEE	; 238
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9c 83       	std	Y+4, r25	; 0x04
 49a:	8b 83       	std	Y+3, r24	; 0x03
Question[2]="Q3_  x^3-1=26 ";
 49c:	8d ef       	ldi	r24, 0xFD	; 253
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	9e 83       	std	Y+6, r25	; 0x06
 4a2:	8d 83       	std	Y+5, r24	; 0x05
Question[3]="Q4_  x^2-2x+1=0";
 4a4:	8c e0       	ldi	r24, 0x0C	; 12
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	98 87       	std	Y+8, r25	; 0x08
 4aa:	8f 83       	std	Y+7, r24	; 0x07
Question[4]="Q5_  x=9i*7i ";
 4ac:	8c e1       	ldi	r24, 0x1C	; 28
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	9a 87       	std	Y+10, r25	; 0x0a
 4b2:	89 87       	std	Y+9, r24	; 0x09
Question[5]="Q6_  Log(x)=2 ";
 4b4:	8a e2       	ldi	r24, 0x2A	; 42
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	9c 87       	std	Y+12, r25	; 0x0c
 4ba:	8b 87       	std	Y+11, r24	; 0x0b
Question[6]="Q7_  1,4,9,x,25";
 4bc:	89 e3       	ldi	r24, 0x39	; 57
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	9e 87       	std	Y+14, r25	; 0x0e
 4c2:	8d 87       	std	Y+13, r24	; 0x0d
Question[7]="Q8_  2,4,x,16,32";
 4c4:	89 e4       	ldi	r24, 0x49	; 73
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	98 8b       	std	Y+16, r25	; 0x10
 4ca:	8f 87       	std	Y+15, r24	; 0x0f
Question[8]="Q9_  1,3,6,x,15";
 4cc:	8a e5       	ldi	r24, 0x5A	; 90
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	9a 8b       	std	Y+18, r25	; 0x12
 4d2:	89 8b       	std	Y+17, r24	; 0x11

char *Ans[9];                     //array of pointers which contains choises for each question
Ans[0]="9  10  11  13";
 4d4:	8a e6       	ldi	r24, 0x6A	; 106
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	9c 8b       	std	Y+20, r25	; 0x14
 4da:	8b 8b       	std	Y+19, r24	; 0x13
Ans[1]="1   2   3   4";
 4dc:	88 e7       	ldi	r24, 0x78	; 120
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	9e 8b       	std	Y+22, r25	; 0x16
 4e2:	8d 8b       	std	Y+21, r24	; 0x15
Ans[2]="1   2   3   5";
 4e4:	26 e8       	ldi	r18, 0x86	; 134
 4e6:	31 e0       	ldi	r19, 0x01	; 1
 4e8:	38 8f       	std	Y+24, r19	; 0x18
 4ea:	2f 8b       	std	Y+23, r18	; 0x17
Ans[3]="1   2   3   4";
 4ec:	9a 8f       	std	Y+26, r25	; 0x1a
 4ee:	89 8f       	std	Y+25, r24	; 0x19
Ans[4]="-72 -63 -54 -81";
 4f0:	84 e9       	ldi	r24, 0x94	; 148
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	9c 8f       	std	Y+28, r25	; 0x1c
 4f6:	8b 8f       	std	Y+27, r24	; 0x1b
Ans[5]="1 10 100 1000";
 4f8:	84 ea       	ldi	r24, 0xA4	; 164
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	9e 8f       	std	Y+30, r25	; 0x1e
 4fe:	8d 8f       	std	Y+29, r24	; 0x1d
Ans[6]="10  12  16  20";
 500:	82 eb       	ldi	r24, 0xB2	; 178
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	98 a3       	std	Y+32, r25	; 0x20
 506:	8f 8f       	std	Y+31, r24	; 0x1f
Ans[7]="5  8  10  12";
 508:	81 ec       	ldi	r24, 0xC1	; 193
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	9a a3       	std	Y+34, r25	; 0x22
 50e:	89 a3       	std	Y+33, r24	; 0x21
Ans[8]="8  10  12  14";
 510:	8e ec       	ldi	r24, 0xCE	; 206
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	9c a3       	std	Y+36, r25	; 0x24
 516:	8b a3       	std	Y+35, r24	; 0x23

int right[9]={9,6,9,5,6,9,9,6,6};   //array of integers which contains right answers in keypad (right pressed number)
 518:	82 e1       	ldi	r24, 0x12	; 18
 51a:	e2 e6       	ldi	r30, 0x62	; 98
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	de 01       	movw	r26, r28
 520:	95 96       	adiw	r26, 0x25	; 37
 522:	01 90       	ld	r0, Z+
 524:	0d 92       	st	X+, r0
 526:	8a 95       	dec	r24
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0xb4>
int Segment[10] = {0xDF,0x86,0xBB,0xAF,0xE6,0xED,0xFD,0x87,0xFF,0xEF};
 52a:	84 e1       	ldi	r24, 0x14	; 20
 52c:	e4 e7       	ldi	r30, 0x74	; 116
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	de 01       	movw	r26, r28
 532:	d7 96       	adiw	r26, 0x37	; 55
 534:	01 90       	ld	r0, Z+
 536:	0d 92       	st	X+, r0
 538:	8a 95       	dec	r24
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0xc6>


while(1)
{
j=1;                                //counter of right answers
 53c:	01 e0       	ldi	r16, 0x01	; 1
 53e:	10 e0       	ldi	r17, 0x00	; 0
 540:	10 93 63 02 	sts	0x0263, r17	; 0x800263 <j+0x1>
 544:	00 93 62 02 	sts	0x0262, r16	; 0x800262 <j>
Rot_0_Deg();                       //initially rotate motor 0 degree
 548:	0e 94 8c 01 	call	0x318	; 0x318 <Rot_0_Deg>
PORTB=~Segment[0];                //start 7 Segment by 0
 54c:	8f a9       	ldd	r24, Y+55	; 0x37
 54e:	80 95       	com	r24
 550:	88 bb       	out	0x18, r24	; 24
CursorPos(0,0);                      //printing message in column 1,row 1
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString("Welcome to Exam");      
 55a:	8c ed       	ldi	r24, 0xDC	; 220
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
CursorPos(1,0);                      //printing message in column 1,row 2
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString("Get Ready ;) ");
 56a:	8c ee       	ldi	r24, 0xEC	; 236
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 572:	2f e3       	ldi	r18, 0x3F	; 63
 574:	32 e4       	ldi	r19, 0x42	; 66
 576:	8f e0       	ldi	r24, 0x0F	; 15
 578:	21 50       	subi	r18, 0x01	; 1
 57a:	30 40       	sbci	r19, 0x00	; 0
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x10a>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x114>
 582:	00 00       	nop
_delay_ms(5000);
ClrScr();                           //clear screen for another message
 584:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>

CursorPos(0,0);                    //printing message in column 1,row 1
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString("Find Value of X");
 590:	8a ef       	ldi	r24, 0xFA	; 250
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
CursorPos(1,0);                   //printing message in column 1,row 2
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString("Time is 1.5min");
 5a0:	8a e0       	ldi	r24, 0x0A	; 10
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 5a8:	9f e3       	ldi	r25, 0x3F	; 63
 5aa:	22 e4       	ldi	r18, 0x42	; 66
 5ac:	3f e0       	ldi	r19, 0x0F	; 15
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	20 40       	sbci	r18, 0x00	; 0
 5b2:	30 40       	sbci	r19, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x140>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x14a>
 5b8:	00 00       	nop
_delay_ms(5000);

ClrScr();                       //lines form 74 to 79 is to handle some error which happens sometimes
 5ba:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
CursorPos(0,0);                 //error is initial value of x "KeyPressed" may be garbage
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString("If You're Ready");  //so it effects the first answer,so we take first keypressed as welcome message
 5c6:	89 e1       	ldi	r24, 0x19	; 25
 5c8:	92 e0       	ldi	r25, 0x02	; 2
 5ca:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
CursorPos(1,0);                //so what ever it's , it won't effect answers
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString("Press to start");
 5d6:	89 e2       	ldi	r24, 0x29	; 41
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
int x=keypressed();                        
 5de:	0e 94 bd 00 	call	0x17a	; 0x17a <keypressed>

Time_Initial();               //Start Counting from first Question
 5e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Time_Initial>
for(i=0;i<9;i++)
 5e6:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <i+0x1>
 5ea:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <i>
{
	
ClrScr();                          //clear screen for next question
 5ee:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
CursorPos(0,0);                   //printing message in column 1,row 1
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString(Question[i]);         //printing Q
 5fa:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <i>
 5fe:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <i+0x1>
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	8c 0f       	add	r24, r28
 60c:	9d 1f       	adc	r25, r29
 60e:	e8 0f       	add	r30, r24
 610:	f9 1f       	adc	r31, r25
 612:	80 81       	ld	r24, Z
 614:	91 81       	ldd	r25, Z+1	; 0x01
 616:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
CursorPos(1,0);                 //printing message in column 1,row 2
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
SendString(Ans[i]);            //printing Ans. of Question
 622:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <i>
 626:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <i+0x1>
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	2c 0f       	add	r18, r28
 634:	3d 1f       	adc	r19, r29
 636:	e2 0f       	add	r30, r18
 638:	f3 1f       	adc	r31, r19
 63a:	82 89       	ldd	r24, Z+18	; 0x12
 63c:	93 89       	ldd	r25, Z+19	; 0x13
 63e:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
x=keypressed();
 642:	0e 94 bd 00 	call	0x17a	; 0x17a <keypressed>
    if(x==right[i]) 
 646:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <i>
 64a:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <i+0x1>
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	21 e0       	ldi	r18, 0x01	; 1
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	2c 0f       	add	r18, r28
 658:	3d 1f       	adc	r19, r29
 65a:	e2 0f       	add	r30, r18
 65c:	f3 1f       	adc	r31, r19
 65e:	24 a1       	ldd	r18, Z+36	; 0x24
 660:	35 a1       	ldd	r19, Z+37	; 0x25
 662:	28 17       	cp	r18, r24
 664:	39 07       	cpc	r19, r25
 666:	09 f0       	breq	.+2      	; 0x66a <main+0x1fc>
 668:	61 c0       	rjmp	.+194    	; 0x72c <main+0x2be>
    {
		ClrScr();                           //clear screen for another message
 66a:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
		CursorPos(0,0);                    //printing message in column 1,row 1
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
		SendString("right answer");
 676:	88 e3       	ldi	r24, 0x38	; 56
 678:	92 e0       	ldi	r25, 0x02	; 2
 67a:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 67e:	8f e4       	ldi	r24, 0x4F	; 79
 680:	93 ec       	ldi	r25, 0xC3	; 195
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	f1 f7       	brne	.-4      	; 0x682 <main+0x214>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x21a>
 688:	00 00       	nop
		_delay_ms(200);
		
        PORTB=~Segment[j]; 
 68a:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <j>
 68e:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <j+0x1>
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	21 e0       	ldi	r18, 0x01	; 1
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	2c 0f       	add	r18, r28
 69c:	3d 1f       	adc	r19, r29
 69e:	e2 0f       	add	r30, r18
 6a0:	f3 1f       	adc	r31, r19
 6a2:	86 a9       	ldd	r24, Z+54	; 0x36
 6a4:	80 95       	com	r24
 6a6:	88 bb       	out	0x18, r24	; 24
     
	        if(j==1) Rot_1_Deg();
 6a8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <j>
 6ac:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <j+0x1>
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	91 05       	cpc	r25, r1
 6b4:	19 f4       	brne	.+6      	; 0x6bc <main+0x24e>
 6b6:	0e 94 9f 01 	call	0x33e	; 0x33e <Rot_1_Deg>
 6ba:	2e c0       	rjmp	.+92     	; 0x718 <main+0x2aa>
       else if(j==2) Rot_2_Deg();
 6bc:	82 30       	cpi	r24, 0x02	; 2
 6be:	91 05       	cpc	r25, r1
 6c0:	19 f4       	brne	.+6      	; 0x6c8 <main+0x25a>
 6c2:	0e 94 af 01 	call	0x35e	; 0x35e <Rot_2_Deg>
 6c6:	28 c0       	rjmp	.+80     	; 0x718 <main+0x2aa>
       else if(j==3) Rot_3_Deg();
 6c8:	83 30       	cpi	r24, 0x03	; 3
 6ca:	91 05       	cpc	r25, r1
 6cc:	19 f4       	brne	.+6      	; 0x6d4 <main+0x266>
 6ce:	0e 94 c0 01 	call	0x380	; 0x380 <Rot_3_Deg>
 6d2:	22 c0       	rjmp	.+68     	; 0x718 <main+0x2aa>
       else if(j==4) Rot_4_Deg();
 6d4:	84 30       	cpi	r24, 0x04	; 4
 6d6:	91 05       	cpc	r25, r1
 6d8:	19 f4       	brne	.+6      	; 0x6e0 <main+0x272>
 6da:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Rot_4_Deg>
 6de:	1c c0       	rjmp	.+56     	; 0x718 <main+0x2aa>
       else if(j==5) Rot_5_Deg();
 6e0:	85 30       	cpi	r24, 0x05	; 5
 6e2:	91 05       	cpc	r25, r1
 6e4:	19 f4       	brne	.+6      	; 0x6ec <main+0x27e>
 6e6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Rot_5_Deg>
 6ea:	16 c0       	rjmp	.+44     	; 0x718 <main+0x2aa>
       else if(j==6) Rot_6_Deg();
 6ec:	86 30       	cpi	r24, 0x06	; 6
 6ee:	91 05       	cpc	r25, r1
 6f0:	19 f4       	brne	.+6      	; 0x6f8 <main+0x28a>
 6f2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Rot_6_Deg>
 6f6:	10 c0       	rjmp	.+32     	; 0x718 <main+0x2aa>
       else if(j==7) Rot_7_Deg();
 6f8:	87 30       	cpi	r24, 0x07	; 7
 6fa:	91 05       	cpc	r25, r1
 6fc:	19 f4       	brne	.+6      	; 0x704 <main+0x296>
 6fe:	0e 94 04 02 	call	0x408	; 0x408 <Rot_7_Deg>
 702:	0a c0       	rjmp	.+20     	; 0x718 <main+0x2aa>
       else if(j==8) Rot_8_Deg();
 704:	88 30       	cpi	r24, 0x08	; 8
 706:	91 05       	cpc	r25, r1
 708:	19 f4       	brne	.+6      	; 0x710 <main+0x2a2>
 70a:	0e 94 14 02 	call	0x428	; 0x428 <Rot_8_Deg>
 70e:	04 c0       	rjmp	.+8      	; 0x718 <main+0x2aa>
       else if(j==9) Rot_9_Deg();
 710:	09 97       	sbiw	r24, 0x09	; 9
 712:	11 f4       	brne	.+4      	; 0x718 <main+0x2aa>
 714:	0e 94 27 02 	call	0x44e	; 0x44e <Rot_9_Deg>

j++;
 718:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <j>
 71c:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <j+0x1>
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <j+0x1>
 726:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <j>
 72a:	15 c0       	rjmp	.+42     	; 0x756 <main+0x2e8>
	}//check if the right key is pressed -->> increase 7segment & rotate 20 degree
	
	else 
	{
			ClrScr();                           //clear screen for another message
 72c:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
			CursorPos(0,0);                    //printing message in column 1,row 1
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
			SendString("wrong answer");
 738:	85 e4       	ldi	r24, 0x45	; 69
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
	PORTC|=(1<<7); _delay_ms(500); PORTC&=~(1<<7); 
 740:	af 9a       	sbi	0x15, 7	; 21
 742:	3f e9       	ldi	r19, 0x9F	; 159
 744:	86 e8       	ldi	r24, 0x86	; 134
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	31 50       	subi	r19, 0x01	; 1
 74a:	80 40       	sbci	r24, 0x00	; 0
 74c:	90 40       	sbci	r25, 0x00	; 0
 74e:	e1 f7       	brne	.-8      	; 0x748 <main+0x2da>
 750:	00 c0       	rjmp	.+0      	; 0x752 <main+0x2e4>
 752:	00 00       	nop
 754:	af 98       	cbi	0x15, 7	; 21
CursorPos(1,0);                //so what ever it's , it won't effect answers
SendString("Press to start");
int x=keypressed();                        

Time_Initial();               //Start Counting from first Question
for(i=0;i<9;i++)
 756:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <i>
 75a:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <i+0x1>
 75e:	01 96       	adiw	r24, 0x01	; 1
 760:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <i+0x1>
 764:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <i>
 768:	09 97       	sbiw	r24, 0x09	; 9
 76a:	0c f4       	brge	.+2      	; 0x76e <main+0x300>
 76c:	40 cf       	rjmp	.-384    	; 0x5ee <main+0x180>
			SendString("wrong answer");
	PORTC|=(1<<7); _delay_ms(500); PORTC&=~(1<<7); 
	}     //if answer is wrong>>turn on red led

}
 	if(j-1==9)
 76e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <j>
 772:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <j+0x1>
 776:	8a 30       	cpi	r24, 0x0A	; 10
 778:	91 05       	cpc	r25, r1
 77a:	99 f4       	brne	.+38     	; 0x7a2 <main+0x334>
	 {
	 		ClrScr();
 77c:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
	 		CursorPos(0,0); SendString("Congratulations");
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 788:	8a ea       	ldi	r24, 0xAA	; 170
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
	 		CursorPos(1,0); SendString("Full Mark ;) ");		 
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 798:	82 e5       	ldi	r24, 0x52	; 82
 79a:	92 e0       	ldi	r25, 0x02	; 2
 79c:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 7a0:	28 c0       	rjmp	.+80     	; 0x7f2 <main+0x384>
	 }
	 	else 
		 {
			 
		 if(j-1>=5)
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	05 97       	sbiw	r24, 0x05	; 5
 7a6:	9c f0       	brlt	.+38     	; 0x7ce <main+0x360>
 		{
	 		ClrScr();
 7a8:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
	 		CursorPos(0,0); SendString("Congratulations");
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 7b4:	8a ea       	ldi	r24, 0xAA	; 170
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
	 		CursorPos(1,0); SendString("You Succeeded");
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 7c4:	8a eb       	ldi	r24, 0xBA	; 186
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 7cc:	12 c0       	rjmp	.+36     	; 0x7f2 <main+0x384>
 		}
 		else {
	 		ClrScr();
 7ce:	0e 94 b3 00 	call	0x166	; 0x166 <ClrScr>
	 		CursorPos(0,0); SendString("Hard lock :' ");
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 7da:	88 ec       	ldi	r24, 0xC8	; 200
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
	 		CursorPos(1,0); SendString("You Failed");
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 88 00 	call	0x110	; 0x110 <CursorPos>
 7ea:	86 ed       	ldi	r24, 0xD6	; 214
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 79 00 	call	0xf2	; 0xf2 <SendString>
 7f2:	2f ef       	ldi	r18, 0xFF	; 255
 7f4:	38 e0       	ldi	r19, 0x08	; 8
 7f6:	8d e3       	ldi	r24, 0x3D	; 61
 7f8:	21 50       	subi	r18, 0x01	; 1
 7fa:	30 40       	sbci	r19, 0x00	; 0
 7fc:	80 40       	sbci	r24, 0x00	; 0
 7fe:	e1 f7       	brne	.-8      	; 0x7f8 <main+0x38a>
 800:	00 c0       	rjmp	.+0      	; 0x802 <main+0x394>
 802:	00 00       	nop
 804:	9d ce       	rjmp	.-710    	; 0x540 <main+0xd2>

00000806 <_exit>:
 806:	f8 94       	cli

00000808 <__stop_program>:
 808:	ff cf       	rjmp	.-2      	; 0x808 <__stop_program>
